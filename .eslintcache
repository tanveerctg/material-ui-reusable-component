[{"E:\\Work\\mui-react\\src\\App.js":"1","E:\\Work\\mui-react\\src\\useTable.js":"2","E:\\Work\\mui-react\\src\\reportWebVitals.js":"3","E:\\Work\\mui-react\\src\\AppTable.js":"4"},{"size":132,"mtime":1611739175248,"results":"5","hashOfConfig":"6"},{"size":8160,"mtime":1611727351622,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1609650277990,"results":"8","hashOfConfig":"6"},{"size":4062,"mtime":1611739189499,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1iw3m4x",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\Work\\mui-react\\src\\App.js",[],"E:\\Work\\mui-react\\src\\useTable.js",["19"],"import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport clsx from 'clsx';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\n\r\nexport default function useTable(records,setRecords,headcells) {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(5);\r\n    const [selected, setSelected] = useState([]);\r\n    const [order, setOrder] = React.useState('asc');\r\n    const [orderBy, setOrderBy] = React.useState('calories');\r\n\r\n    //When row (item) is clicked this function will fire and update the selected list\r\n    const handleClick = (event, id) => {\r\n        const selectedIndex = selected.indexOf(id);\r\n        let newSelected = [];\r\n    \r\n        if (selectedIndex === -1) {\r\n          newSelected = newSelected.concat(selected, id);\r\n        } else if (selectedIndex === 0) {\r\n          newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n          newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n          newSelected = newSelected.concat(\r\n            selected.slice(0, selectedIndex),\r\n            selected.slice(selectedIndex + 1),\r\n          );\r\n        }\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    //Functions For Sorting\r\n    function descendingComparator(a, b, orderBy) {\r\n      if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n      }\r\n      if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    }\r\n    function getComparator(order, orderBy) {\r\n      return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n    }\r\n    \r\n    function stableSort(array, comparator) {\r\n      const stabilizedThis = array.map((el, index) => [el, index]);\r\n      stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n      });\r\n      return stabilizedThis.map((el) => el[0]);\r\n    }\r\n    \r\n\r\n    //ToolBar\r\n\r\n    const useToolbarStyles = makeStyles((theme) => ({\r\n      root: {\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(1),\r\n      },\r\n      highlight:\r\n        theme.palette.type === 'light'\r\n          ? {\r\n              color: theme.palette.secondary.main,\r\n              backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n            }\r\n          : {\r\n              color: theme.palette.text.primary,\r\n              backgroundColor: theme.palette.secondary.dark,\r\n            },\r\n      title: {\r\n        flex: '1 1 100%',\r\n      },\r\n    }));\r\n\r\n    const AppToolbar = ({name}) => {\r\n      const classes = useToolbarStyles();\r\n      const deleteItem=e=>{\r\n        setRecords(itms=>itms.filter(itm=> selected.indexOf(itm.id) == -1 && itm))\r\n        setSelected([])\r\n      }\r\n      return (\r\n        <Toolbar\r\n          className={clsx(classes.root, {\r\n            [classes.highlight]: selected.length > 0,\r\n          })}\r\n        >\r\n          {selected.length > 0 ? (\r\n            <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n              {selected.length} selected\r\n            </Typography>\r\n          ) : (\r\n            <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n              {name}\r\n            </Typography>\r\n          )}\r\n    \r\n          {selected.length > 0 && (\r\n            <Tooltip title=\"Delete\">\r\n              <IconButton aria-label=\"delete\" onClick={deleteItem}>\r\n                <DeleteIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          )}\r\n        </Toolbar>\r\n      );\r\n    };\r\n    \r\n    AppToolbar.propTypes = {\r\n      name: PropTypes.string.isRequired,\r\n    };\r\n    \r\n\r\n    //Table Header\r\n    \r\n    const useHeaderStyles = makeStyles((theme) => ({\r\n      visuallyHidden: {\r\n        border: 0,\r\n        clip: 'rect(0 0 0 0)',\r\n        height: 1,\r\n        margin: -1,\r\n        overflow: 'hidden',\r\n        padding: 0,\r\n        position: 'absolute',\r\n        top: 20,\r\n        width: 1,\r\n      }\r\n    }));\r\n\r\n    const TblHeader=()=>{\r\n\r\n      const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n      };\r\n\r\n      const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n          const newSelecteds = records.map(({id}) => id);\r\n          setSelected(newSelecteds);\r\n          return;\r\n        }\r\n        setSelected([]);\r\n      };\r\n\r\n      const classes = useHeaderStyles();\r\n\r\n      const createSortHandler = (property) => (event) => {\r\n        handleRequestSort(event, property);\r\n      };\r\n      return(\r\n      <TableHead>\r\n        <TableRow>         \r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={selected.length > 0 && selected.length < records.length}\r\n            checked={records.length > 0 && selected.length === records.length}\r\n            onChange={handleSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n\r\n          {headcells.map((headCell) => (\r\n            <TableCell\r\n              key={headCell.id}\r\n              align={headCell.numeric ? 'right' : 'left'}\r\n              padding={headCell.disablePadding ? 'none' : 'default'}\r\n              sortDirection={orderBy === headCell.id ? order : false}\r\n            >\r\n              <TableSortLabel\r\n                active={orderBy === headCell.id}\r\n                direction={orderBy === headCell.id ? order : 'asc'}\r\n                onClick={createSortHandler(headCell.id)}\r\n              >\r\n                {headCell.label}\r\n                {orderBy === headCell.id ? (\r\n                  <span className={classes.visuallyHidden}>\r\n                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                  </span>\r\n                ) : null}\r\n              </TableSortLabel>\r\n            </TableCell>\r\n          ))}\r\n\r\n        </TableRow>\r\n      </TableHead>)\r\n    }\r\n\r\n\r\n\r\n    //Table Container\r\n    const TblContainer=(props)=>(\r\n        <TableContainer component=\"div\" >\r\n             <Table aria-label=\"simple table\">\r\n                {props.children}\r\n             </Table>\r\n        </TableContainer>\r\n    )\r\n\r\n    //Pagination\r\n    const Pagination=()=>{\r\n      const handleChangePage = (event, newPage) => {\r\n          setPage(newPage);\r\n      };\r\n      const handleChangeRowsPerPage = (event) => {\r\n          setRowsPerPage(parseInt(event.target.value, 10));\r\n          setPage(0);\r\n      };\r\n\r\n      return(\r\n      <TablePagination\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n        component=\"div\"\r\n        count={records.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n      )\r\n    }\r\n    \r\n\r\n    const rowsAfterPaginationAndSorting=()=>{\r\n        return stableSort(records, getComparator(order, orderBy)).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n    }\r\n    return {\r\n        TblContainer,\r\n        TblHeader,\r\n        Pagination,\r\n        rowsAfterPaginationAndSorting,\r\n        selected,\r\n        handleClick,\r\n        AppToolbar\r\n    }\r\n}\r\n","E:\\Work\\mui-react\\src\\reportWebVitals.js",[],"E:\\Work\\mui-react\\src\\AppTable.js",["20"],{"ruleId":"21","severity":1,"message":"22","line":99,"column":69,"nodeType":"23","messageId":"24","endLine":99,"endColumn":71},{"ruleId":"25","severity":1,"message":"26","line":84,"column":17,"nodeType":"27","endLine":84,"endColumn":27},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute"]